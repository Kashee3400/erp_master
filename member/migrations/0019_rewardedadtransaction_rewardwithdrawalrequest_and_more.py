# Generated by Django 4.2 on 2025-10-22 07:39

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('member', '0018_news_module'),
    ]

    operations = [
        migrations.CreateModel(
            name='RewardedAdTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='System-generated unique identifier for this rewarded ad transaction.', unique=True, verbose_name='Transaction UUID')),
                ('reward_source', models.CharField(choices=[('google', 'Google AdMob'), ('facebook', 'Facebook Audience Network'), ('unity', 'Unity Ads'), ('other', 'Other')], default='google', help_text='Identifies which ad network generated this reward (e.g., Google, Facebook).', max_length=20, verbose_name='Reward Source')),
                ('ad_unit_id', models.CharField(help_text='Unique ad unit identifier as configured in the ad network console.', max_length=255, verbose_name='Ad Unit ID')),
                ('reward_type', models.CharField(default='coins', help_text='Type of reward granted (e.g., coins, points, tokens).', max_length=100, verbose_name='Reward Type')),
                ('reward_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Numeric value of the reward granted (e.g., 10 coins).', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Reward Amount')),
                ('transaction_token', models.CharField(help_text='Unique token provided by the ad network to verify server-side callbacks.', max_length=512, unique=True, verbose_name='Transaction Token')),
                ('device_id', models.CharField(blank=True, help_text='Optional unique device identifier to detect abuse or duplication.', max_length=255, null=True, verbose_name='Device ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the rewarded ad completion was received.', null=True, verbose_name='IP Address')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether this transaction was verified via Google’s server-side verification API.', verbose_name='Is Verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the transaction record was created.', verbose_name='Created At')),
                ('verified_at', models.DateTimeField(blank=True, help_text='Timestamp when the ad reward was verified successfully.', null=True, verbose_name='Verified At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto-updated timestamp of the last modification to this record.', verbose_name='Last Updated')),
                ('user', models.ForeignKey(help_text='The user who earned this reward by completing a rewarded ad.', on_delete=django.db.models.deletion.CASCADE, related_name='rewarded_ad_transactions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Rewarded Ad Transaction',
                'verbose_name_plural': 'Rewarded Ad Transactions',
                'db_table': 'rewarded_ad_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RewardWithdrawalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount user has requested to withdraw.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('1.00'))], verbose_name='Requested Amount')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', help_text='Current processing state of this withdrawal request.', max_length=20, verbose_name='Withdrawal Status')),
                ('transaction_reference', models.CharField(blank=True, help_text='Payment gateway or internal reference ID once processed.', max_length=255, null=True, verbose_name='Transaction Reference')),
                ('requested_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the withdrawal was initiated.', verbose_name='Requested At')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when the withdrawal was approved or completed.', null=True, verbose_name='Processed At')),
                ('remarks', models.TextField(blank=True, help_text='Optional remarks from admin during approval or rejection.', null=True, verbose_name='Admin Remarks')),
                ('user', models.ForeignKey(help_text='The user who requested the withdrawal.', on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Reward Withdrawal Request',
                'verbose_name_plural': 'Reward Withdrawal Requests',
                'db_table': 'reward_withdrawal_request',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='RewardLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='System-generated unique identifier for this ledger transaction.', unique=True, verbose_name='Ledger Entry UUID')),
                ('transaction_type', models.CharField(choices=[('credit', 'Credit (Earned)'), ('debit', 'Debit (Withdrawal/Spend)'), ('adjustment', 'Manual Adjustment')], help_text='Indicates whether this record is a credit, debit, or adjustment.', max_length=20, verbose_name='Transaction Type')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount credited or debited to the user’s balance.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Amount')),
                ('balance_after', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='The user’s balance immediately after this transaction.', max_digits=12, verbose_name='Balance After Transaction')),
                ('description', models.CharField(blank=True, help_text="Optional note or reason for this transaction (e.g., 'Ad Reward', 'Withdrawal').", max_length=255, verbose_name='Description')),
                ('is_finalized', models.BooleanField(default=False, help_text='Indicates whether this transaction has been locked from modification.', verbose_name='Is Finalized')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this ledger entry was created.', verbose_name='Created At')),
                ('source_ad', models.ForeignKey(blank=True, help_text='Reference to the original ad reward transaction (if applicable).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='member.rewardedadtransaction', verbose_name='Source Ad Transaction')),
                ('user', models.ForeignKey(help_text='The user whose reward balance is affected.', on_delete=django.db.models.deletion.CASCADE, related_name='reward_ledger_entries', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Reward Ledger Entry',
                'verbose_name_plural': 'Reward Ledger Entries',
                'db_table': 'reward_ledger',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='rewardledger',
            index=models.Index(fields=['user'], name='reward_ledg_user_id_95515b_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardledger',
            index=models.Index(fields=['transaction_type'], name='reward_ledg_transac_494f68_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardedadtransaction',
            index=models.Index(fields=['user', 'reward_source'], name='rewarded_ad_user_id_292fae_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardedadtransaction',
            index=models.Index(fields=['transaction_token'], name='rewarded_ad_transac_ab7744_idx'),
        ),
        migrations.AddConstraint(
            model_name='rewardedadtransaction',
            constraint=models.UniqueConstraint(fields=('user', 'transaction_token'), name='unique_user_reward_transaction'),
        ),
    ]
