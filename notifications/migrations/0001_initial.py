# Generated by Django 4.2 on 2025-10-26 13:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this notification (auto-generated).', unique=True, verbose_name='UUID')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the related object this notification refers to.', null=True, verbose_name='Object ID')),
                ('title', models.CharField(help_text='Notification title displayed to the user.', max_length=255, verbose_name='Title')),
                ('body', models.TextField(help_text='Notification message body displayed to the user.', verbose_name='Body')),
                ('email_subject', models.CharField(blank=True, help_text='Subject line for email notifications, if applicable.', max_length=255, verbose_name='Email Subject')),
                ('email_body', models.TextField(blank=True, help_text='Body content for email notifications, if applicable.', verbose_name='Email Body')),
                ('deep_link_url', models.URLField(blank=True, help_text='Full URL for deep linking (web or universal link).', max_length=500, verbose_name='Deep Link URL')),
                ('app_route', models.CharField(blank=True, help_text='Internal app route for in-app navigation.', max_length=255, verbose_name='App Route')),
                ('custom_key', models.CharField(blank=True, help_text='Optional key used for grouping or client-side logic.', max_length=100, null=True, verbose_name='Custom Key')),
                ('is_subroute', models.BooleanField(default=False, help_text='Indicates if the route is a sub-path or detail view.', verbose_name='Is Subroute')),
                ('channels', models.JSONField(default=list, help_text='List of channels to deliver this notification through (push, email, sms, in_app).', verbose_name='Delivery Channels')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', help_text='Priority level of the notification (low, normal, high).', max_length=10, verbose_name='Priority')),
                ('notification_type', models.CharField(choices=[('info', 'Information'), ('success', 'Success'), ('warning', 'Warning'), ('error', 'Error')], default='info', help_text='Type of notification (info, alert, etc.).', max_length=10, verbose_name='Notification Type')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional context data for templating and deep linking.', verbose_name='Context Data')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('partialy_sent', 'Partially Sent')], db_index=True, default='pending', help_text='Current status of the notification (pending, sent, delivered, failed).', max_length=20, verbose_name='Status')),
                ('delivery_status', models.JSONField(blank=True, default=dict, help_text='Per-channel delivery status and responses from external services.', verbose_name='Delivery Status')),
                ('scheduled_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Datetime when the notification is scheduled to be sent.', verbose_name='Scheduled At')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Datetime when the notification was sent.', null=True, verbose_name='Sent At')),
                ('delivered_at', models.DateTimeField(blank=True, help_text='Datetime when the notification was successfully delivered.', null=True, verbose_name='Delivered At')),
                ('read_at', models.DateTimeField(blank=True, help_text='Datetime when the recipient read the notification.', null=True, verbose_name='Read At')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Datetime after which the notification is no longer relevant.', null=True, verbose_name='Expires At')),
                ('is_read', models.BooleanField(db_index=True, default=False, help_text='Whether the recipient has read this notification.', verbose_name='Is Read')),
                ('is_archived', models.BooleanField(default=False, help_text='Whether the notification has been archived by the recipient.', verbose_name='Is Archived')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Datetime when the notification record was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Datetime when the notification record was last updated.', verbose_name='Updated At')),
                ('error_message', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, help_text='Type of the related object this notification refers to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('recipient', models.ForeignKey(help_text='The user who will receive this notification.', on_delete=django.db.models.deletion.CASCADE, related_name='received_app_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
                ('sender', models.ForeignKey(blank=True, help_text='The user who sent this notification, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_app_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Sender')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique identifier for this template', max_length=100, unique=True, verbose_name='Template Name')),
                ('title_template', models.CharField(help_text='Template for notification title (supports variables)', max_length=255, verbose_name='Title Template')),
                ('body_template', models.TextField(help_text='Template for notification body (supports variables)', verbose_name='Body Template')),
                ('email_subject_template', models.CharField(blank=True, max_length=255, verbose_name='Email Subject Template')),
                ('email_body_template', models.TextField(blank=True, verbose_name='Email Body Template')),
                ('enabled_channels', models.JSONField(default=list, help_text='List of channels this template supports', verbose_name='Enabled Channels')),
                ('default_priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('notification_type', models.CharField(choices=[('info', 'Information'), ('success', 'Success'), ('warning', 'Warning'), ('error', 'Error')], default='info', max_length=10)),
                ('route_template', models.CharField(blank=True, help_text="URL route template for deep linking (e.g., '/orders/{object_id}/')", max_length=255, verbose_name='Route Template')),
                ('url_name', models.CharField(blank=True, help_text='Django URL name for reverse lookup', max_length=100, verbose_name='URL Name')),
                ('category', models.CharField(blank=True, help_text="Grouping category (e.g., 'orders', 'users', 'system')", max_length=50, verbose_name='Category')),
                ('locale', models.CharField(default='en', help_text="Locale (e.g., 'hi', 'en')", max_length=50, verbose_name='Locale')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'db_table': 'tbl_notification_templates',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTrackMppCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_code', models.CharField(max_length=200, verbose_name='Mpp Collection Code')),
                ('is_sent', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'tbl_notification_track',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this notification group (auto-generated).', unique=True, verbose_name='UUID')),
                ('name', models.CharField(help_text='Human-readable name for the notification group.', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional description explaining the purpose of this group.', verbose_name='Description')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the related object triggering this group.', null=True, verbose_name='Object ID')),
                ('icon', models.CharField(blank=True, help_text='Icon class or emoji representing the notification group.', max_length=50, verbose_name='Icon')),
                ('color', models.CharField(default='#007bff', help_text='Hex color code representing this notification group.', max_length=7, verbose_name='Color')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this notification group was created.', verbose_name='Created At')),
                ('content_type', models.ForeignKey(blank=True, help_text='Type of the related object triggering this notification group.', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
            ],
            options={
                'verbose_name': 'Notification Group',
                'verbose_name_plural': 'Notification Groups',
                'db_table': 'tbl_notification_group',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(choices=[('in_app', 'In-App'), ('push', 'Push Notification'), ('email', 'Email'), ('sms', 'SMS'), ('webhook', 'Webhook')], default='push', help_text='The channel used to deliver the notification (e.g., email, SMS, push).', max_length=50, verbose_name='Delivery Channel')),
                ('recipient', models.CharField(help_text='Recipient identifier: email, phone number, or device token.', max_length=255, verbose_name='Recipient')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('partialy_sent', 'Partially Sent')], default='pending', help_text='Current status of the delivery attempt.', max_length=20, verbose_name='Delivery Status')),
                ('attempt_count', models.IntegerField(default=0, help_text='Number of delivery attempts made for this notification.', verbose_name='Attempt Count')),
                ('max_attempts', models.IntegerField(default=3, help_text='Maximum allowed attempts before marking as failed.', verbose_name='Maximum Attempts')),
                ('next_attempt_at', models.DateTimeField(blank=True, help_text='Scheduled time for the next delivery attempt.', null=True, verbose_name='Next Attempt At')),
                ('external_id', models.CharField(blank=True, help_text='ID provided by the external delivery service.', max_length=255, verbose_name='External ID')),
                ('response_data', models.JSONField(blank=True, default=dict, help_text='Raw response data returned by the delivery channel.', verbose_name='Response Data')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the delivery attempt failed.', verbose_name='Error Message')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Timestamp when the notification was sent.', null=True, verbose_name='Sent At')),
                ('delivered_at', models.DateTimeField(blank=True, help_text='Timestamp when the notification was successfully delivered.', null=True, verbose_name='Delivered At')),
                ('failed_at', models.DateTimeField(blank=True, help_text='Timestamp when the delivery attempt failed.', null=True, verbose_name='Failed At')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated.', verbose_name='Updated At')),
                ('notification', models.ForeignKey(help_text='The notification instance associated with this delivery attempt.', on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='notifications.notification', verbose_name='Notification')),
            ],
            options={
                'verbose_name': 'Notification Delivery',
                'verbose_name_plural': 'Notification Deliveries',
                'db_table': 'tbl_notification_deliveries',
            },
        ),
        migrations.CreateModel(
            name='NotificationClickTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clicks', to='notifications.notification')),
            ],
            options={
                'db_table': 'tbl_notification_click_tracking',
            },
        ),
        migrations.CreateModel(
            name='NotificationAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(choices=[('in_app', 'In-App'), ('push', 'Push Notification'), ('email', 'Email'), ('sms', 'SMS'), ('webhook', 'Webhook')], default='push')),
                ('date', models.DateField(db_index=True)),
                ('sent_count', models.IntegerField(default=0)),
                ('delivered_count', models.IntegerField(default=0)),
                ('read_count', models.IntegerField(default=0)),
                ('clicked_count', models.IntegerField(default=0)),
                ('failed_count', models.IntegerField(default=0)),
                ('delivery_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('read_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('click_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='notifications.notificationtemplate')),
            ],
            options={
                'db_table': 'tbl_notification_analytics',
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='template',
            field=models.ForeignKey(help_text='The template used to generate this notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='notifications.notificationtemplate', verbose_name='Notification Template'),
        ),
        migrations.CreateModel(
            name='NotificationPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, help_text='Category of notifications for which these preferences apply.', max_length=50, verbose_name='Category')),
                ('allow_push', models.BooleanField(default=True, help_text='Whether the user wants to receive push notifications for this template or category.', verbose_name='Allow Push Notifications')),
                ('allow_email', models.BooleanField(default=True, help_text='Whether the user wants to receive email notifications for this template or category.', verbose_name='Allow Email Notifications')),
                ('allow_sms', models.BooleanField(default=False, help_text='Whether the user wants to receive SMS notifications for this template or category.', verbose_name='Allow SMS Notifications')),
                ('allow_in_app', models.BooleanField(default=True, help_text='Whether the user wants to receive in-app notifications for this template or category.', verbose_name='Allow In-App Notifications')),
                ('quiet_hours_start', models.TimeField(blank=True, help_text='Start time for quiet hours during which notifications should not be sent.', null=True, verbose_name='Quiet Hours Start')),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='End time for quiet hours during which notifications should not be sent.', null=True, verbose_name='Quiet Hours End')),
                ('timezone', models.CharField(default='UTC', help_text='Timezone used to interpret quiet hours and other time-based preferences.', max_length=50, verbose_name='Timezone')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this preference record was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this preference record was last updated.', verbose_name='Updated At')),
                ('template', models.ForeignKey(blank=True, help_text='Specific notification template this preference applies to. Leave blank for category-wide preferences.', null=True, on_delete=django.db.models.deletion.CASCADE, to='notifications.notificationtemplate', verbose_name='Notification Template')),
                ('user', models.ForeignKey(help_text='The user for whom these notification preferences apply.', on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification Preference',
                'verbose_name_plural': 'Notification Preferences',
                'db_table': 'tbl_notification',
                'unique_together': {('user', 'template'), ('user', 'category')},
            },
        ),
        migrations.AddIndex(
            model_name='notificationdelivery',
            index=models.Index(fields=['status', 'next_attempt_at'], name='tbl_notific_status_b72c2b_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationdelivery',
            index=models.Index(fields=['channel', '-created_at'], name='tbl_notific_channel_34077b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationdelivery',
            unique_together={('notification', 'channel')},
        ),
        migrations.AlterUniqueTogether(
            name='notificationanalytics',
            unique_together={('template', 'channel', 'date')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'status', '-created_at'], name='notificatio_recipie_1b3d03_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read', '-created_at'], name='notificatio_recipie_684eac_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['template', '-created_at'], name='notificatio_templat_be2f04_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at', 'status'], name='notificatio_schedul_963ed3_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority', '-created_at'], name='notificatio_priorit_3fc670_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['content_type', 'object_id'], name='notificatio_content_702c56_idx'),
        ),
    ]
