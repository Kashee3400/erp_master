# Generated by Django 4.2 on 2025-05-28 09:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalBreed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('breed', models.CharField(help_text='Enter the breed name (e.g., Jersey, Holstein)', max_length=100, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Breed')),
                ('origin_country', models.CharField(blank=True, help_text='Country or region where this breed originated', max_length=100, null=True, verbose_name='Country of Origin')),
                ('average_milk_yield', models.DecimalField(blank=True, decimal_places=2, help_text='Average daily milk yield in liters (e.g., 22.50)', max_digits=6, null=True, verbose_name='Avg Milk Yield (L/day)')),
                ('color', models.CharField(blank=True, help_text='Typical coat color of the breed (e.g., brown, black-and-white)', max_length=50, null=True, verbose_name='Coat Color')),
                ('adaptability', models.TextField(blank=True, help_text='Notes on climate or region adaptability', null=True, verbose_name='Adaptability')),
                ('description', models.TextField(blank=True, help_text='Additional notes or characteristics', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Cattle Breed',
                'verbose_name_plural': 'Cattle Breeds',
                'db_table': 'tbl_animal_breed',
                'ordering': ['breed'],
            },
        ),
        migrations.CreateModel(
            name='AnimalDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('milk_production', models.CharField(blank=True, help_text="Optional note on milk production (e.g., '2.5L/day')", max_length=100, null=True, verbose_name='Milk Production')),
            ],
            options={
                'verbose_name': 'Animal Diagnosis',
                'verbose_name_plural': 'Animal Diagnoses',
                'db_table': 'tbl_animal_diagnosis',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseEntry',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('address', models.CharField(default='', help_text='Address where the case occurred or was reported', max_length=255, verbose_name='Address')),
                ('remark', models.TextField(blank=True, help_text='Additional notes or remarks about the case', null=True, verbose_name='Remarks')),
                ('advice', models.TextField(blank=True, help_text='Advice or instructions given for the case', null=True, verbose_name='Advice')),
                ('case_no', models.CharField(help_text='Unique identifier for the case (e.g., CASE-2024-001)', max_length=250, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Case Number')),
                ('sync', models.BooleanField(default=False, help_text='Indicates whether the entry is synced with the server', verbose_name='Sync Status')),
            ],
            options={
                'verbose_name': 'Case Entry',
                'verbose_name_plural': 'Case Entries',
                'db_table': 'tbl_case_entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cattle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('module', models.CharField(help_text='Module, for ex, sahayak, member, etc', max_length=20, verbose_name='')),
                ('module_code', models.CharField(help_text='Module code', max_length=50)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='male', help_text='Gender of the cattle', max_length=10, verbose_name='Gender')),
                ('age', models.PositiveIntegerField(help_text='Age of the cattle in months', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Age')),
                ('breed', models.ForeignKey(blank=True, help_text='Select the breed of the cattle', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='breed_animals', to='veterinary.animalbreed')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('mother', models.ForeignKey(blank=True, help_text='The mother of this cattle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='offspring', to='veterinary.cattle')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Cattle',
                'verbose_name_plural': 'Cattles',
                'db_table': 'tbl_cattle',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('sync', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Diagnosis Route',
                'verbose_name_plural': 'Diagnosis Routes',
                'db_table': 'tbl_diagnosis_route',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('disease', models.CharField(help_text='Name of the disease (e.g., Mastitis, FMD)', max_length=100, unique=True, verbose_name='Disease Name')),
                ('description', models.TextField(blank=True, help_text='Brief overview of the disease, symptoms, and progression', null=True, verbose_name='Description')),
                ('treatment', models.TextField(blank=True, help_text='Suggested treatment or veterinary advice', null=True, verbose_name='Treatment')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Disease',
                'verbose_name_plural': 'Diseases',
                'db_table': 'tbl_animal_disease',
                'ordering': ['disease'],
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('medicine', models.CharField(help_text='Name of the medicine', max_length=100, verbose_name='Medicine')),
                ('description', models.TextField(blank=True, help_text='Some description of the medicine', null=True, verbose_name='Description')),
                ('icon', models.ImageField(blank=True, help_text='Upload an icon image for the medicine (recommended size 200x200 px)', null=True, upload_to='medicine/icon')),
                ('strength', models.CharField(blank=True, help_text='e.g., 500mg, 5ml per dose', max_length=50, null=True)),
                ('packaging', models.CharField(blank=True, help_text='e.g., 10 tablets per strip, 100ml bottle', max_length=100, null=True, verbose_name='Packaging')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Expiry Date of the medicine', null=True, verbose_name='Expiry Date')),
            ],
            options={
                'verbose_name': 'Medicine',
                'verbose_name_plural': 'Medicines',
                'db_table': 'tbl_medicine',
            },
        ),
        migrations.CreateModel(
            name='MedicineStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('total_quantity', models.FloatField(default=0, help_text='Total quantity available (e.g., tablets, ml, vials)')),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for traceability', max_length=50, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date of this stock batch', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time this stock was updated')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('medicine', models.ForeignKey(help_text='Medicine item in stock', on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='veterinary.medicine')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Medicine Stock',
                'verbose_name_plural': 'Medicine Stock',
                'db_table': 'tbl_medicine_stock',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('method', models.CharField(choices=[('online', 'Online'), ('cash', 'Cash')], max_length=100, unique=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserMedicineStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('allocated_quantity', models.FloatField(default=0, help_text='Quantity allocated from the stock (e.g., 10 tablets or 50 ml)')),
                ('allocation_date', models.DateField(auto_now_add=True, help_text='Date on which the stock was allocated')),
                ('remarks', models.TextField(blank=True, help_text='Optional notes for the allocation (e.g., emergency supply)', null=True)),
                ('used_quantity', models.PositiveIntegerField(default=0, help_text='Quantity already used by the user')),
                ('min_threshold', models.PositiveIntegerField(default=0, help_text='Threshold value for reminder when stock is low')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if this record has been synced')),
                ('threshold_quantity', models.FloatField(default=0, help_text='Minimum required quantity for this user to trigger a refill reminder')),
                ('allocated_by', models.ForeignKey(blank=True, help_text='User who made the allocation (admin or supervisor)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_allocations_made', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('medicine_stock', models.ForeignKey(help_text='Batch and quantity of the medicine stock allocated', on_delete=django.db.models.deletion.CASCADE, related_name='user_allocations', to='veterinary.medicinestock')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.ForeignKey(help_text='User (e.g., vet or worker) allocated with this medicine', on_delete=django.db.models.deletion.CASCADE, related_name='medicine_stocks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Medicine Allocation',
                'verbose_name_plural': 'User Medicine Allocations',
                'db_table': 'tbl_user_medicine_stock',
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='OnlinePayment',
            fields=[
                ('payment_method', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='online_payment', serialize=False, to='veterinary.paymentmethod')),
                ('gateway_name', models.CharField(max_length=100)),
                ('sync', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Online Payment Method',
                'verbose_name_plural': 'Online Payment Methods',
                'db_table': 'tbl_online_payment_methods',
            },
        ),
        migrations.CreateModel(
            name='UserMedicineTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('ALLOCATED', 'Allocated'), ('USED', 'Used'), ('RETURNED', 'Returned')], default='ALLOCATED', help_text='The type of action performed: Allocated, Used, or Returned', max_length=10, verbose_name='Action Type')),
                ('quantity', models.FloatField(help_text='The quantity involved in this transaction (e.g., 10 tablets, 5 ml)', validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Transaction Quantity')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when this transaction occurred', verbose_name='Transaction Timestamp')),
                ('note', models.TextField(blank=True, help_text='Optional remarks or notes about this transaction', null=True, verbose_name='Notes')),
                ('user_medicine_stock', models.ForeignKey(help_text="The user's allocated medicine stock this transaction relates to", on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='veterinary.usermedicinestock')),
            ],
            options={
                'verbose_name': 'Medicine Transaction',
                'verbose_name_plural': 'Medicine Transactions',
                'db_table': 'tbl_user_medicine_stock_transaction',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TravelRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('from_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('to_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('to_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('distance_travelled', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('case_entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='travel_records', to='veterinary.caseentry')),
            ],
            options={
                'verbose_name': 'Travel Record',
                'verbose_name_plural': 'Travel Records',
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('start_time', models.TimeField(help_text='Start time of the slot', verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, help_text='End time of the slot (optional)', null=True, verbose_name='End Time')),
                ('period', models.CharField(choices=[('Morning', 'Morning'), ('Afternoon', 'Afternoon'), ('Evening', 'Evening'), ('Night', 'Night')], help_text='Time of day this slot belongs to (e.g., Morning, Evening)', max_length=20, verbose_name='Period of Day')),
                ('normal_cost', models.DecimalField(decimal_places=2, help_text='Standard cost for this time slot', max_digits=10, verbose_name='Normal Cost')),
                ('operational_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost during operational cases (if different from normal)', max_digits=10, null=True, verbose_name='Operational Cost')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Time Slot',
                'verbose_name_plural': 'Time Slots',
                'db_table': 'tbl_time_slot',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('symptom', models.CharField(help_text='Name of the symptom (e.g., Fever, Coughing)', max_length=100, unique=True, verbose_name='Symptom Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the symptom and its signs', null=True, verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'db_table': 'tbl_animal_symptoms',
                'ordering': ['symptom'],
            },
        ),
        migrations.CreateModel(
            name='MedicineStockAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out'), ('ADJUST', 'Adjustment')], help_text='Type of stock transaction', max_length=10)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity added/removed')),
                ('description', models.TextField(blank=True, help_text='Optional notes for the stock change', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_stock_changes', to=settings.AUTH_USER_MODEL)),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='veterinary.medicine')),
            ],
            options={
                'verbose_name': 'Medicine Stock Audit',
                'verbose_name_plural': 'Medicine Stock Audits',
                'db_table': 'tbl_medicine_stock_audit',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicineCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('category', models.CharField(help_text='eg. tablet, liquid, injection, etc', max_length=100, verbose_name='Category')),
                ('medicine_form', models.CharField(choices=[('tablet', 'Tablet'), ('liquid', 'Liquid'), ('injection', 'Injection'), ('capsule', 'Capsule'), ('ointment', 'Ointment'), ('powder', 'Powder'), ('paste', 'Paste'), ('bolus', 'Bolus'), ('suspension', 'Suspension'), ('solution', 'Solution'), ('spray', 'Spray'), ('drops', 'Eye/Ear/Nose Drops'), ('cream', 'Cream'), ('lotion', 'Lotion'), ('shampoo', 'Medicated Shampoo'), ('feed_additive', 'Feed Additive'), ('implant', 'Implant'), ('inhalant', 'Inhalant'), ('transdermal_patch', 'Transdermal Patch'), ('suppository', 'Suppository'), ('drench', 'Drench'), ('pour_on', 'Pour-On'), ('intramammary', 'Intramammary'), ('other', 'Other')], default='tablet', help_text='Form in which the medicine is administered', max_length=20)),
                ('unit_of_quantity', models.CharField(help_text='e.g., ml, mg, tablets', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('parent_category', models.ForeignKey(blank=True, help_text='Parent category if this is a subcategory', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='veterinary.medicinecategory', verbose_name='Parent Category')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Medicine Category',
                'verbose_name_plural': 'Medicine Categories',
                'db_table': 'tbl_medicine_category',
            },
        ),
        migrations.AddField(
            model_name='medicine',
            name='category',
            field=models.ForeignKey(help_text='Category and form of the medicine', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicines', to='veterinary.medicinecategory'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='recommended_for_disease',
            field=models.ForeignKey(blank=True, help_text='Recommended to disease', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommended_medicines', to='veterinary.disease', verbose_name='Recommended For Disease'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='disease',
            name='symptoms',
            field=models.ManyToManyField(help_text='Symptoms commonly associated with this disease', related_name='diseases', to='veterinary.symptoms'),
        ),
        migrations.AddField(
            model_name='disease',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.CreateModel(
            name='DiagnosedSymptomHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('remark', models.TextField(blank=True, help_text='Additional notes or observations about the symptom', null=True, verbose_name='Remark')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('diagnosis', models.ForeignKey(help_text='Diagnosis entry this symptom is related to', on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_symptoms', to='veterinary.animaldiagnosis', verbose_name='Animal Diagnosis')),
                ('symptom', models.ForeignKey(blank=True, help_text='Symptom associated with this diagnosis', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.symptoms', verbose_name='Symptom')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Diagnosed Symptom',
                'verbose_name_plural': 'Diagnosed Symptoms',
                'db_table': 'tbl_animal_diagnosed_symptom',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CattleTagging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('image', models.ImageField(upload_to='tagging/images/')),
                ('tag_number', models.CharField(help_text='Unique tag number for the cattle (e.g., IND-12345)', max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z0-9\\-]+$', message='Only uppercase letters, numbers, and hyphens allowed.')], verbose_name='Tag Number')),
                ('tag_method', models.CharField(choices=[('Manual', 'Manual'), ('RFID', 'RFID Tag'), ('QR', 'QR Code')], default='Manual', help_text='Method used for tagging the cattle', max_length=10)),
                ('tag_location', models.CharField(choices=[('Left Ear', 'Left Ear'), ('Right Ear', 'Right Ear'), ('Neck', 'Neck'), ('Other', 'Other')], default='Left Ear', help_text='Physical location on the body where the tag is placed', max_length=20)),
                ('tag_action', models.CharField(choices=[('created', 'New Tag'), ('replaced', 'Replaced')], default='created', help_text='Whether this tag is newly created or a replacement', max_length=10)),
                ('replaced_on', models.DateField(blank=True, help_text='If tag was replaced, provide the replacement date', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Additional comments, reason for replacement, etc.', null=True)),
                ('cattle', models.OneToOneField(help_text='The cattle being tagged', on_delete=django.db.models.deletion.CASCADE, related_name='cattle_tagged', to='veterinary.cattle')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Cattle Tagging',
                'verbose_name_plural': 'Cattle Tagging',
                'db_table': 'tbl_cattle_tagging',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CattleStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('status', models.CharField(choices=[('dry', 'Dry'), ('pregnant', 'Pregnant'), ('milking', 'Milking'), ('milking_pregnant', 'Milking & Pregnant')], default='dry', help_text='Cattle case status,eg:- dry, pregnant, etc', max_length=20, verbose_name='Cattle Status')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Cattle Status',
                'verbose_name_plural': 'Cattle Statuses',
                'db_table': 'tbl_cattle_status',
            },
        ),
        migrations.CreateModel(
            name='CattleCaseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('case_type', models.CharField(choices=[('Normal', 'Normal Case'), ('Special', 'Special Case'), ('Operational', 'Operational Case')], default='Normal', help_text='Type of case for cattle service (Normal, Special, Operational)', max_length=20, unique=True, verbose_name='Case Type')),
                ('description', models.TextField(blank=True, help_text='Optional description or notes about this case type', null=True, verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Cattle Case Type',
                'verbose_name_plural': 'Cattle Case Types',
                'db_table': 'tbl_cattle_case_type',
                'ordering': ['case_type'],
            },
        ),
        migrations.CreateModel(
            name='CattleCaseStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Completed', 'Completed')], default='Pending', help_text='case status of cattle', max_length=20, verbose_name='Case Status')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Case Status',
                'verbose_name_plural': 'Case Statuses',
                'db_table': 'tbl_cattle_case_status',
            },
        ),
        migrations.CreateModel(
            name='CaseReceiverLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('remarks', models.TextField(blank=True, help_text='Optional remarks for the transfer', null=True, verbose_name='Remarks')),
                ('transferred_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the case was transferred', verbose_name='Transferred At')),
                ('case_entry', models.ForeignKey(blank=True, help_text='Reference to the case entry being transferred', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='receiver_logs', to='veterinary.caseentry', verbose_name='Case Entry')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('from_user', models.ForeignKey(blank=True, help_text='User who previously handled the case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_transferred_from', to=settings.AUTH_USER_MODEL, verbose_name='Transferred From')),
                ('to_user', models.ForeignKey(help_text='User who is receiving the case', on_delete=django.db.models.deletion.CASCADE, related_name='case_transferred_to', to=settings.AUTH_USER_MODEL, verbose_name='Transferred To')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Case Receiver Log',
                'verbose_name_plural': 'Case Receiver Logs',
                'db_table': 'tbl_case_receiver_logs',
                'ordering': ['-transferred_at'],
            },
        ),
        migrations.CreateModel(
            name='CasePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount paid', max_digits=10, verbose_name='Amount')),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when payment was made', verbose_name='Payment Date')),
                ('transaction_id', models.CharField(blank=True, help_text='Payment gateway transaction reference number or manual receipt ID', max_length=100, null=True, verbose_name='Transaction ID')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='Current status of the payment', max_length=20, verbose_name='Payment Status')),
                ('gateway_response', models.JSONField(blank=True, help_text='Raw payment gateway response data (only for online payments)', null=True, verbose_name='Gateway Response')),
                ('is_reconciled', models.BooleanField(default=False, help_text='Indicates if the payment is reconciled in accounting', verbose_name='Is Reconciled')),
                ('is_collected', models.BooleanField(default=False, help_text='Indicates if cash payment has been collected (for COD)', verbose_name='Is Cash Collected')),
                ('collected_date', models.DateTimeField(blank=True, help_text='Date and time when cash was collected', null=True, verbose_name='Collected Date')),
                ('case_entry', models.ForeignKey(help_text='Case associated with this payment', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='veterinary.caseentry', verbose_name='Case Entry')),
                ('collected_by', models.ForeignKey(blank=True, help_text='User who collected the cash (for COD)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_payments', to=settings.AUTH_USER_MODEL, verbose_name='Collected By')),
                ('payment_method', models.ForeignKey(help_text='Method used for payment', on_delete=django.db.models.deletion.CASCADE, to='veterinary.paymentmethod', verbose_name='Payment Method')),
            ],
            options={
                'verbose_name': 'Case Payment',
                'verbose_name_plural': 'Case Payments',
                'db_table': 'tbl_case_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.AddField(
            model_name='caseentry',
            name='animal',
            field=models.ForeignKey(help_text='The cattle associated with this case entry', on_delete=django.db.models.deletion.CASCADE, related_name='cattle_cases', to='veterinary.cattle', verbose_name='Cattle'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='applied_by',
            field=models.ForeignKey(blank=True, help_text='User who applied or recorded this case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_entries', to=settings.AUTH_USER_MODEL, verbose_name='Applied By'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Current status of the cattle case', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.cattlecasestatus', verbose_name='Case Status'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.CreateModel(
            name='ArtificialInsemination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('insemination_date', models.DateField(help_text='Date when the AI was performed')),
                ('semen_batch_number', models.CharField(help_text='Batch number or ID of the semen used', max_length=50)),
                ('technician_name', models.CharField(help_text='Name of the technician or vet who performed the AI', max_length=100)),
                ('result', models.CharField(choices=[('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], default='Pending', help_text='Outcome of the insemination', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or observations', null=True)),
                ('otp_sent_to', models.CharField(blank=True, help_text='Phone number or contact where OTP was sent', max_length=15, null=True, verbose_name='OTP Sent To')),
                ('otp_verified', models.BooleanField(default=False, help_text='Indicates whether the OTP has been verified', verbose_name='OTP Verified')),
                ('otp_sent_at', models.DateTimeField(blank=True, help_text='Timestamp when OTP was sent', null=True, verbose_name='OTP Sent At')),
                ('otp_verified_at', models.DateTimeField(blank=True, help_text='Timestamp when OTP was successfully verified', null=True, verbose_name='OTP Verified At')),
                ('cattle', models.ForeignKey(help_text='Cattle that received the insemination', on_delete=django.db.models.deletion.CASCADE, related_name='ai_records', to='veterinary.cattle')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('performed_by', models.ForeignKey(blank=True, help_text='User who performed the insemination (e.g., Doctor, MAT)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_ais', to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Artificial Insemination',
                'verbose_name_plural': 'Artificial Inseminations',
                'db_table': 'tbl_artificial_insemination',
                'ordering': ['-insemination_date'],
            },
        ),
        migrations.CreateModel(
            name='AnimalType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('animal_type', models.CharField(help_text='Enter the type of animal (e.g., Cow, Buffalo)', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Animal Type')),
                ('scientific_name', models.CharField(blank=True, help_text='Scientific name of the animal (e.g., Bos taurus for Cow)', max_length=150, null=True, verbose_name='Scientific Name')),
                ('category', models.CharField(choices=[('dairy', 'Dairy'), ('beef', 'Beef'), ('dual', 'Dual Purpose'), ('other', 'Other')], default='dairy', help_text='Primary use category of the animal', max_length=50, verbose_name='Category')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description or notes', null=True, verbose_name='Description')),
                ('average_lifespan', models.PositiveIntegerField(blank=True, help_text='Average lifespan in years (e.g., 15)', null=True, verbose_name='Average Lifespan')),
                ('is_milk_producing', models.BooleanField(default=True, help_text='Is this animal type typically used for milk production?', verbose_name='Milk Producing')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Cattle Type',
                'verbose_name_plural': 'Cattle Types',
                'db_table': 'tbl_animal_type',
                'ordering': ['animal_type'],
            },
        ),
        migrations.CreateModel(
            name='AnimalTreatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or instructions for the treatment', null=True, verbose_name='Notes')),
                ('otp_verified', models.BooleanField(default=False, help_text='Indicates whether the treatment has been verified via OTP', verbose_name='OTP Verified')),
                ('case_treatment', models.ForeignKey(blank=True, help_text='The case entry to which this treatment belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_treatments', to='veterinary.caseentry', verbose_name='Case Entry')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('medicine', models.ForeignKey(blank=True, help_text='Medicine used in the treatment, if any', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.medicine', verbose_name='Medicine')),
                ('route', models.ForeignKey(blank=True, help_text='Route of administration for the medicine', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.diagnosisroute', verbose_name='Administration Route')),
                ('treatment_by', models.ForeignKey(help_text='User (doctor or vet) who performed the treatment', on_delete=django.db.models.deletion.CASCADE, related_name='treatments_done', to=settings.AUTH_USER_MODEL, verbose_name='Treatment Provider')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Animal Treatment',
                'verbose_name_plural': 'Animal Treatments',
                'db_table': 'tbl_animal_treatments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='case_entry',
            field=models.ForeignKey(help_text='The case entry associated with this diagnosis', on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='veterinary.caseentry', verbose_name='Case Entry'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='case_type',
            field=models.ForeignKey(blank=True, help_text='Type of the veterinary case (e.g., Normal, Special, Operational)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.cattlecasetype', verbose_name='Case Type'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='disease',
            field=models.ForeignKey(blank=True, help_text='Identified disease during the diagnosis', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.disease', verbose_name='Disease'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Current physiological or production status of the animal', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.cattlestatus', verbose_name='Cattle Status'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='animalbreed',
            name='animal_type',
            field=models.ForeignKey(help_text='Select the animal type this breed belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='breeds', to='veterinary.animaltype'),
        ),
        migrations.AddField(
            model_name='animalbreed',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='animalbreed',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.CreateModel(
            name='AICharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.CharField(choices=[('doctor', 'Doctor'), ('mat', 'MAT'), ('other', 'Other')], default='mat', help_text='Role of the user performing AI', max_length=20, verbose_name='User Role')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Charge amount for AI', max_digits=10, verbose_name='Charge Amount')),
                ('user', models.ForeignKey(blank=True, help_text='Specific user this charge applies to (overrides role)', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'AI Charge',
                'verbose_name_plural': 'AI Charges',
                'db_table': 'tbl_ai_charge',
            },
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['user_medicine_stock'], name='tbl_user_me_user_me_2cae09_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['action'], name='tbl_user_me_action_1f5cb4_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['timestamp'], name='tbl_user_me_timesta_ed13e3_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinestock',
            index=models.Index(fields=['user'], name='tbl_user_me_user_id_ce2758_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinestock',
            index=models.Index(fields=['medicine_stock'], name='tbl_user_me_medicin_4a2979_idx'),
        ),
        migrations.AddIndex(
            model_name='timeslot',
            index=models.Index(fields=['period'], name='tbl_time_sl_period_8a113b_idx'),
        ),
        migrations.AddIndex(
            model_name='timeslot',
            index=models.Index(fields=['start_time', 'end_time'], name='tbl_time_sl_start_t_ed32d7_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['symptom'], name='tbl_animal__symptom_6f18ea_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestockaudit',
            index=models.Index(fields=['medicine', 'transaction_type'], name='tbl_medicin_medicin_c95762_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestock',
            index=models.Index(fields=['medicine'], name='tbl_medicin_medicin_1db97b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='medicinecategory',
            unique_together={('category', 'parent_category')},
        ),
        migrations.AddIndex(
            model_name='disease',
            index=models.Index(fields=['disease'], name='tbl_animal__disease_294609_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosedsymptomhistory',
            index=models.Index(fields=['diagnosis'], name='tbl_animal__diagnos_153905_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosedsymptomhistory',
            index=models.Index(fields=['symptom'], name='tbl_animal__symptom_87a5f5_idx'),
        ),
        migrations.AddIndex(
            model_name='cattletagging',
            index=models.Index(fields=['tag_number'], name='tbl_cattle__tag_num_fb33a1_idx'),
        ),
        migrations.AddIndex(
            model_name='cattletagging',
            index=models.Index(fields=['cattle'], name='tbl_cattle__cattle__ec8674_idx'),
        ),
        migrations.AddIndex(
            model_name='cattlecasetype',
            index=models.Index(fields=['case_type'], name='tbl_cattle__case_ty_68dc74_idx'),
        ),
        migrations.AddIndex(
            model_name='cattle',
            index=models.Index(fields=['breed'], name='tbl_cattle_breed_i_6a0750_idx'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['case_entry'], name='tbl_case_re_case_en_dca954_idx'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['to_user'], name='tbl_case_re_to_user_f16871_idx'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['transferred_at'], name='tbl_case_re_transfe_a1c708_idx'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['case_entry'], name='tbl_case_pa_case_en_b00267_idx'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['payment_method'], name='tbl_case_pa_payment_1e4f41_idx'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['payment_status'], name='tbl_case_pa_payment_94faaf_idx'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['transaction_id'], name='tbl_case_pa_transac_b0089e_idx'),
        ),
        migrations.AddIndex(
            model_name='caseentry',
            index=models.Index(fields=['case_no'], name='tbl_case_en_case_no_94aeb1_idx'),
        ),
        migrations.AddIndex(
            model_name='caseentry',
            index=models.Index(fields=['animal'], name='tbl_case_en_animal__d45001_idx'),
        ),
        migrations.AddIndex(
            model_name='artificialinsemination',
            index=models.Index(fields=['cattle'], name='tbl_artific_cattle__88e26e_idx'),
        ),
        migrations.AddIndex(
            model_name='artificialinsemination',
            index=models.Index(fields=['insemination_date'], name='tbl_artific_insemin_95e52a_idx'),
        ),
        migrations.AddIndex(
            model_name='animaltype',
            index=models.Index(fields=['animal_type'], name='tbl_animal__animal__83f81e_idx'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['case_treatment'], name='tbl_animal__case_tr_391e2d_idx'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['treatment_by'], name='tbl_animal__treatme_4a1b3a_idx'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['medicine'], name='tbl_animal__medicin_03b7ec_idx'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['case_entry'], name='tbl_animal__case_en_caca96_idx'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['disease'], name='tbl_animal__disease_bbc560_idx'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['status'], name='tbl_animal__status__d80580_idx'),
        ),
        migrations.AddIndex(
            model_name='animalbreed',
            index=models.Index(fields=['breed'], name='tbl_animal__breed_196e02_idx'),
        ),
        migrations.AddIndex(
            model_name='animalbreed',
            index=models.Index(fields=['animal_type'], name='tbl_animal__animal__0d4a0a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aicharge',
            unique_together={('user_role', 'user')},
        ),
    ]
