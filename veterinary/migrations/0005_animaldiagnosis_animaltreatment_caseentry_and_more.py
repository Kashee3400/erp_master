# Generated by Django 4.2 on 2025-07-29 10:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('veterinary', '0004_remove_cattlestatuslog_veterinary__status__3f365e_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('milk_production', models.CharField(blank=True, help_text="Optional note on milk production (e.g., '2.5L/day').", max_length=100, null=True, verbose_name='Milk Production')),
            ],
            options={
                'verbose_name': 'Animal Diagnosis',
                'verbose_name_plural': 'Animal Diagnoses',
                'db_table': 'tbl_animal_diagnosis',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimalTreatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or instructions for the treatment.', null=True, verbose_name='Notes')),
                ('otp_verified', models.BooleanField(default=False, help_text='Indicates whether the treatment has been verified via OTP.', verbose_name='OTP Verified')),
            ],
            options={
                'verbose_name': 'Animal Treatment',
                'verbose_name_plural': 'Animal Treatments',
                'db_table': 'tbl_animal_treatments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseEntry',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Completed', 'Completed')], default='Pending', help_text='Current status of the case.', max_length=20, verbose_name='Case Status')),
                ('address', models.CharField(default='', help_text='Address where the case occurred or was reported.', max_length=255, verbose_name='Address')),
                ('remark', models.TextField(blank=True, help_text='Additional notes or remarks about the case.', null=True, verbose_name='Remarks')),
                ('case_no', models.CharField(help_text='Unique identifier for the case.', max_length=250, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Case Number')),
                ('sync', models.BooleanField(default=False, help_text='Indicates whether the entry is synced with the server.', verbose_name='Sync Status')),
            ],
            options={
                'verbose_name': 'Case Entry',
                'verbose_name_plural': 'Case Entries',
                'db_table': 'tbl_case_entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CasePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount paid.', max_digits=10, verbose_name='Amount')),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when the payment was made.', verbose_name='Payment Date')),
                ('transaction_id', models.CharField(blank=True, help_text='Payment gateway reference or manual receipt ID.', max_length=100, null=True, verbose_name='Transaction ID')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='Current status of the payment.', max_length=20, verbose_name='Payment Status')),
                ('gateway_response', models.JSONField(blank=True, help_text='Raw payment gateway response data (online payments only).', null=True, verbose_name='Gateway Response')),
                ('is_reconciled', models.BooleanField(default=False, help_text='Whether this payment is reconciled in accounting.', verbose_name='Is Reconciled')),
                ('is_collected', models.BooleanField(default=False, help_text='Indicates if cash has been collected for offline payments.', verbose_name='Is Cash Collected')),
                ('collected_date', models.DateTimeField(blank=True, help_text='Date and time when cash was collected.', null=True, verbose_name='Collected Date')),
            ],
            options={
                'verbose_name': 'Case Payment',
                'verbose_name_plural': 'Case Payments',
                'db_table': 'tbl_case_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='CaseReceiverLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('remarks', models.TextField(blank=True, help_text='Optional remarks for the transfer.', null=True, verbose_name='Remarks')),
                ('transferred_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the case was transferred.', verbose_name='Transferred At')),
            ],
            options={
                'verbose_name': 'Case Receiver Log',
                'verbose_name_plural': 'Case Receiver Logs',
                'db_table': 'tbl_case_receiver_logs',
                'ordering': ['-transferred_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosedSymptomHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('remark', models.TextField(blank=True, help_text='Additional notes or observations about the symptom.', null=True, verbose_name='Remark')),
            ],
            options={
                'verbose_name': 'Diagnosed Symptom',
                'verbose_name_plural': 'Diagnosed Symptoms',
                'db_table': 'tbl_animal_diagnosed_symptom',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', models.CharField(help_text='Short name or label of the diagnosis route, e.g., Oral, Injection, etc.', max_length=20, verbose_name='Diagnosis Route Name')),
                ('created_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update. Automatically set on update.', verbose_name='Last Updated At')),
                ('sync', models.BooleanField(default=False, help_text='Flag to track if the record has been synced with external systems.', verbose_name='Is Synced')),
            ],
            options={
                'verbose_name': 'Diagnosis Route',
                'verbose_name_plural': 'Diagnosis Routes',
                'db_table': 'tbl_diagnosis_route',
                'ordering': ['route'],
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('disease', models.CharField(help_text='Name of the disease (e.g., Mastitis, FMD)', max_length=100, unique=True, verbose_name='Disease Name')),
                ('description', models.TextField(blank=True, help_text='Brief overview of the disease, symptoms, and progression', null=True, verbose_name='Description')),
                ('treatment', models.TextField(blank=True, help_text='Suggested treatment or veterinary advice', null=True, verbose_name='Treatment')),
                ('severity', models.CharField(choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe'), ('Critical', 'Critical')], default='Moderate', help_text='Severity level of the disease', max_length=10, verbose_name='Severity')),
            ],
            options={
                'verbose_name': 'Disease',
                'verbose_name_plural': 'Diseases',
                'db_table': 'tbl_animal_disease',
                'ordering': ['disease'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('name', models.CharField(help_text='Name of the location (e.g., Central Store, Block Office)', max_length=255, verbose_name='Location Name')),
                ('code', models.CharField(help_text='Unique identifier for the location (e.g., for integration)', max_length=50, unique=True, verbose_name='Location Code')),
                ('type', models.CharField(choices=[('central_warehouse', 'Central Warehouse'), ('field_office', 'Field Office'), ('mobile_unit', 'Mobile Veterinary Unit'), ('clinic', 'Clinic'), ('vet', 'Veterinarian')], default='clinic', help_text='Category or type of the location', max_length=30, verbose_name='Location Type')),
                ('address', models.TextField(blank=True, help_text='Full address of the location', null=True, verbose_name='Address')),
                ('district', models.CharField(blank=True, help_text='District in which the location falls', max_length=100, null=True, verbose_name='District')),
                ('state', models.CharField(blank=True, help_text='State or province', max_length=100, null=True, verbose_name='State')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude coordinate for map integration', max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude coordinate for map integration', max_digits=9, null=True, verbose_name='Longitude')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'tbl_location',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('medicine', models.CharField(help_text='Name of the medicine', max_length=100, verbose_name='Medicine')),
                ('description', models.TextField(blank=True, help_text='Some description of the medicine', null=True, verbose_name='Description')),
                ('icon', models.ImageField(blank=True, help_text='Upload an icon image for the medicine (recommended size 200x200 px)', null=True, upload_to='medicine/icon')),
                ('strength', models.CharField(blank=True, help_text='e.g., 500mg, 5ml per dose', max_length=50, null=True)),
                ('packaging', models.CharField(blank=True, help_text='e.g., 10 tablets per strip, 100ml bottle', max_length=100, null=True, verbose_name='Packaging')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Expiry Date of the medicine', null=True, verbose_name='Expiry Date')),
            ],
            options={
                'verbose_name': 'Medicine',
                'verbose_name_plural': 'Medicines',
                'db_table': 'tbl_medicine',
            },
        ),
        migrations.CreateModel(
            name='MedicineStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('total_quantity', models.FloatField(default=0, help_text='Total quantity available (e.g., tablets, ml, vials)')),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for traceability', max_length=50, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date of this stock batch', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time this stock was updated')),
                ('medicine', models.ForeignKey(help_text='Medicine item in stock', on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='veterinary.medicine')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Medicine Stock',
                'verbose_name_plural': 'Medicine Stock',
                'db_table': 'tbl_medicine_stock',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='TravelRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_latitude', models.DecimalField(decimal_places=6, help_text='Starting point latitude.', max_digits=9, verbose_name='From Latitude')),
                ('from_longitude', models.DecimalField(decimal_places=6, help_text='Starting point longitude.', max_digits=9, verbose_name='From Longitude')),
                ('to_latitude', models.DecimalField(decimal_places=6, help_text='Destination latitude.', max_digits=9, verbose_name='To Latitude')),
                ('to_longitude', models.DecimalField(decimal_places=6, help_text='Destination longitude.', max_digits=9, verbose_name='To Longitude')),
                ('distance_travelled', models.DecimalField(decimal_places=2, help_text='Calculated distance in kilometers.', max_digits=10, verbose_name='Distance Travelled (km)')),
                ('date', models.DateField(help_text='Date of the travel.', verbose_name='Travel Date')),
                ('case_entry', models.OneToOneField(help_text='Case related to this travel record.', on_delete=django.db.models.deletion.CASCADE, related_name='travel_record', to='veterinary.caseentry', verbose_name='Case Entry')),
            ],
            options={
                'verbose_name': 'Travel Record',
                'verbose_name_plural': 'Travel Records',
                'db_table': 'tbl_travel_records',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UserMedicineStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('allocated_quantity', models.FloatField(default=0, help_text='Quantity allocated from the stock (e.g., 10 tablets or 50 ml)')),
                ('allocation_date', models.DateField(auto_now_add=True, help_text='Date on which the stock was allocated')),
                ('remarks', models.TextField(blank=True, help_text='Optional notes for the allocation (e.g., emergency supply)', null=True)),
                ('used_quantity', models.PositiveIntegerField(default=0, help_text='Quantity already used by the user')),
                ('min_threshold', models.PositiveIntegerField(default=0, help_text='Threshold value for reminder when stock is low')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if this record has been synced')),
                ('threshold_quantity', models.FloatField(default=0, help_text='Minimum required quantity for this user to trigger a refill reminder')),
                ('allocated_by', models.ForeignKey(blank=True, help_text='User who made the allocation (admin or supervisor)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_allocations_made', to=settings.AUTH_USER_MODEL)),
                ('medicine_stock', models.ForeignKey(help_text='Batch and quantity of the medicine stock allocated', on_delete=django.db.models.deletion.CASCADE, related_name='user_allocations', to='veterinary.medicinestock')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.ForeignKey(help_text='User (e.g., vet or worker) allocated with this medicine', on_delete=django.db.models.deletion.CASCADE, related_name='medicine_stocks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Medicine Allocation',
                'verbose_name_plural': 'User Medicine Allocations',
                'db_table': 'tbl_user_medicine_stock',
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='UserMedicineTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('ALLOCATED', 'Allocated'), ('USED', 'Used'), ('RETURNED', 'Returned')], default='ALLOCATED', help_text='The type of action performed: Allocated, Used, or Returned', max_length=10, verbose_name='Action Type')),
                ('quantity', models.FloatField(help_text='The quantity involved in this transaction (e.g., 10 tablets, 5 ml)', verbose_name='Transaction Quantity')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when this transaction occurred', verbose_name='Transaction Timestamp')),
                ('note', models.TextField(blank=True, help_text='Optional remarks or notes about this transaction', null=True, verbose_name='Notes')),
                ('user_medicine_stock', models.ForeignKey(help_text="The user's allocated medicine stock this transaction relates to", on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='veterinary.usermedicinestock')),
            ],
            options={
                'verbose_name': 'Medicine Transaction',
                'verbose_name_plural': 'Medicine Transactions',
                'db_table': 'tbl_user_medicine_stock_transaction',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TravelRecordImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload image related to the travel, such as vehicle dashboard, odometer, or scene.', upload_to='travel_records/%Y/%m/%d/', verbose_name='Image')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Time when image was uploaded.', verbose_name='Uploaded At')),
                ('description', models.TextField(blank=True, help_text='Optional notes about this image.', null=True, verbose_name='Description')),
                ('travel_record', models.ForeignKey(help_text='Travel record associated with this image.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='veterinary.travelrecord', verbose_name='Travel Record')),
            ],
            options={
                'verbose_name': 'Travel Record Image',
                'verbose_name_plural': 'Travel Record Images',
                'db_table': 'tbl_travel_record_images',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('symptom', models.CharField(help_text='Name of the symptom (e.g., Fever, Coughing)', max_length=100, unique=True, verbose_name='Symptom Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the symptom and its signs', null=True, verbose_name='Description')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'db_table': 'tbl_animal_symptoms',
                'ordering': ['symptom'],
            },
        ),
        migrations.CreateModel(
            name='MedicineStockTransferLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_transferred', models.FloatField(help_text='Exact quantity of medicine transferred from stock')),
                ('transfer_type', models.CharField(choices=[('inward', 'Inward'), ('outward', 'Outward'), ('return', 'Return')], default='outward', help_text='Type of transfer (inward, outward, return)', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the stock transfer', max_length=20)),
                ('batch_number', models.CharField(blank=True, help_text='Snapshot of the batch number at the time of transfer', max_length=50, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Snapshot of expiry date at time of transfer', null=True)),
                ('transfer_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the stock was transferred')),
                ('received_at', models.DateTimeField(blank=True, help_text='Timestamp when stock was received and confirmed', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Optional comments or notes on the transfer', null=True)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per unit for tracking valuation', max_digits=10, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost of transferred quantity', max_digits=12, null=True)),
                ('from_location', models.ForeignKey(help_text='Location sending the medicine', on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfers', to='veterinary.location')),
                ('medicine_stock', models.ForeignKey(help_text='The batch of medicine being transferred', on_delete=django.db.models.deletion.CASCADE, to='veterinary.medicinestock')),
                ('received_by', models.ForeignKey(blank=True, help_text='User who received the stock at destination', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_transfers_received', to=settings.AUTH_USER_MODEL)),
                ('to_location', models.ForeignKey(help_text='Location receiving the medicine', on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfers', to='veterinary.location')),
                ('transferred_by', models.ForeignKey(help_text='User who initiated the stock transfer', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_transfers_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Medicine Stock Transfer Log',
                'verbose_name_plural': 'Medicine Stock Transfer Logs',
                'db_table': 'tbl_medicine_stock_transfer_log',
                'ordering': ['-transfer_date'],
            },
        ),
        migrations.CreateModel(
            name='MedicineStockAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out'), ('ADJUST', 'Adjustment')], help_text='Type of stock transaction', max_length=10)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity added/removed')),
                ('description', models.TextField(blank=True, help_text='Optional notes for the stock change', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_stock_changes', to=settings.AUTH_USER_MODEL)),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='veterinary.medicine')),
            ],
            options={
                'verbose_name': 'Medicine Stock Audit',
                'verbose_name_plural': 'Medicine Stock Audits',
                'db_table': 'tbl_medicine_stock_audit',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicineCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('hi', 'Hindi'), ('en', 'English')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('category', models.CharField(help_text='eg. tablet, liquid, injection, etc', max_length=100, verbose_name='Category')),
                ('medicine_form', models.CharField(choices=[('tablet', 'Tablet'), ('liquid', 'Liquid'), ('injection', 'Injection'), ('capsule', 'Capsule'), ('ointment', 'Ointment'), ('powder', 'Powder'), ('paste', 'Paste'), ('bolus', 'Bolus'), ('suspension', 'Suspension'), ('solution', 'Solution'), ('spray', 'Spray'), ('drops', 'Eye/Ear/Nose Drops'), ('cream', 'Cream'), ('lotion', 'Lotion'), ('shampoo', 'Medicated Shampoo'), ('feed_additive', 'Feed Additive'), ('implant', 'Implant'), ('inhalant', 'Inhalant'), ('transdermal_patch', 'Transdermal Patch'), ('suppository', 'Suppository'), ('drench', 'Drench'), ('pour_on', 'Pour-On'), ('intramammary', 'Intramammary'), ('other', 'Other')], default='tablet', help_text='Form in which the medicine is administered', max_length=20)),
                ('unit_of_quantity', models.CharField(help_text='e.g., ml, mg, tablets', max_length=20)),
                ('parent_category', models.ForeignKey(blank=True, help_text='Parent category if this is a subcategory', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='veterinary.medicinecategory', verbose_name='Parent Category')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Medicine Category',
                'verbose_name_plural': 'Medicine Categories',
                'db_table': 'tbl_medicine_category',
            },
        ),
        migrations.AddField(
            model_name='medicine',
            name='category',
            field=models.ForeignKey(help_text='Category and form of the medicine', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicines', to='veterinary.medicinecategory'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='diseases',
            field=models.ManyToManyField(help_text='Diseases this medicine is commonly prescribed for.', related_name='medicines', to='veterinary.disease', verbose_name='Diseases'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='disease',
            name='symptoms',
            field=models.ManyToManyField(help_text='Symptoms commonly associated with this disease', related_name='diseases', to='veterinary.symptoms'),
        ),
        migrations.AddField(
            model_name='disease',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddIndex(
            model_name='diagnosisroute',
            index=models.Index(fields=['route'], name='idx_diagnosisroute_route'),
        ),
        migrations.AddIndex(
            model_name='diagnosisroute',
            index=models.Index(fields=['sync'], name='idx_diagnosisroute_sync'),
        ),
        migrations.AddField(
            model_name='diagnosedsymptomhistory',
            name='diagnosis',
            field=models.ForeignKey(help_text='Diagnosis entry this symptom is related to.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_symptoms', to='veterinary.animaldiagnosis', verbose_name='Animal Diagnosis'),
        ),
        migrations.AddField(
            model_name='diagnosedsymptomhistory',
            name='symptom',
            field=models.ForeignKey(blank=True, help_text='Symptom associated with this diagnosis.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.symptoms', verbose_name='Symptom'),
        ),
        migrations.AddField(
            model_name='diagnosedsymptomhistory',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='casereceiverlog',
            name='assigned_from',
            field=models.ForeignKey(blank=True, help_text='User who previously handled the case.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_transferred_from', to=settings.AUTH_USER_MODEL, verbose_name='Transferred From'),
        ),
        migrations.AddField(
            model_name='casereceiverlog',
            name='assigned_to',
            field=models.ForeignKey(help_text='User who is receiving the case.', on_delete=django.db.models.deletion.CASCADE, related_name='case_transferred_to', to=settings.AUTH_USER_MODEL, verbose_name='Transferred To'),
        ),
        migrations.AddField(
            model_name='casereceiverlog',
            name='case_entry',
            field=models.ForeignKey(blank=True, help_text='Reference to the case entry being transferred.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='receiver_logs', to='veterinary.caseentry', verbose_name='Case Entry'),
        ),
        migrations.AddField(
            model_name='casereceiverlog',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='casepayment',
            name='case_entry',
            field=models.ForeignKey(help_text='Case associated with this payment.', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='veterinary.caseentry', verbose_name='Case Entry'),
        ),
        migrations.AddField(
            model_name='casepayment',
            name='collected_by',
            field=models.ForeignKey(blank=True, help_text='User who collected the payment (for COD).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_payments', to=settings.AUTH_USER_MODEL, verbose_name='Collected By'),
        ),
        migrations.AddField(
            model_name='casepayment',
            name='payment_method',
            field=models.ForeignKey(help_text='Method used for payment.', on_delete=django.db.models.deletion.CASCADE, to='veterinary.paymentmethod', verbose_name='Payment Method'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='cattle',
            field=models.ForeignKey(help_text='The cattle associated with this case entry.', on_delete=django.db.models.deletion.CASCADE, related_name='cattle_cases', to='veterinary.cattle', verbose_name='Cattle'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who applied or recorded this case.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_entries', to=settings.AUTH_USER_MODEL, verbose_name='Applied By'),
        ),
        migrations.AddField(
            model_name='caseentry',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='animaltreatment',
            name='case_treatment',
            field=models.ForeignKey(blank=True, help_text='The case entry to which this treatment belongs.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_treatments', to='veterinary.caseentry', verbose_name='Case Entry'),
        ),
        migrations.AddField(
            model_name='animaltreatment',
            name='medicine',
            field=models.ForeignKey(blank=True, help_text='Medicine used in the treatment, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.medicine', verbose_name='Medicine'),
        ),
        migrations.AddField(
            model_name='animaltreatment',
            name='route',
            field=models.ForeignKey(blank=True, help_text='Route of administration for the medicine.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.diagnosisroute', verbose_name='Administration Route'),
        ),
        migrations.AddField(
            model_name='animaltreatment',
            name='treatment_by',
            field=models.ForeignKey(help_text='User (doctor or vet) who performed the treatment.', on_delete=django.db.models.deletion.CASCADE, related_name='treatments_done', to=settings.AUTH_USER_MODEL, verbose_name='Treatment Provider'),
        ),
        migrations.AddField(
            model_name='animaltreatment',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='case_entry',
            field=models.ForeignKey(help_text='The case entry associated with this diagnosis.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='veterinary.caseentry', verbose_name='Case Entry'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='case_type',
            field=models.ForeignKey(blank=True, help_text='Type of the veterinary case (e.g., Normal, Special, Operational).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.cattlecasetype', verbose_name='Case Type'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='disease',
            field=models.ForeignKey(blank=True, help_text='Identified disease during the diagnosis.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.disease', verbose_name='Disease'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Current physiological or production status of the animal.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='veterinary.cattlestatustype', verbose_name='Cattle Status'),
        ),
        migrations.AddField(
            model_name='animaldiagnosis',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By'),
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['user_medicine_stock'], name='tbl_user_me_user_me_2cae09_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['action'], name='tbl_user_me_action_1f5cb4_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinetransaction',
            index=models.Index(fields=['timestamp'], name='tbl_user_me_timesta_ed13e3_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinestock',
            index=models.Index(fields=['user'], name='tbl_user_me_user_id_ce2758_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicinestock',
            index=models.Index(fields=['medicine_stock'], name='tbl_user_me_medicin_4a2979_idx'),
        ),
        migrations.AddIndex(
            model_name='travelrecordimage',
            index=models.Index(fields=['travel_record'], name='idx_travel_image_record'),
        ),
        migrations.AddIndex(
            model_name='travelrecord',
            index=models.Index(fields=['case_entry'], name='idx_travel_case_entry'),
        ),
        migrations.AddIndex(
            model_name='travelrecord',
            index=models.Index(fields=['date'], name='idx_travel_date'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['symptom'], name='tbl_animal__symptom_6f18ea_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestocktransferlog',
            index=models.Index(fields=['medicine_stock'], name='tbl_medicin_medicin_f63cc6_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestocktransferlog',
            index=models.Index(fields=['from_location', 'to_location'], name='tbl_medicin_from_lo_f24bc4_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestocktransferlog',
            index=models.Index(fields=['status'], name='tbl_medicin_status_9f865e_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestockaudit',
            index=models.Index(fields=['medicine', 'transaction_type'], name='tbl_medicin_medicin_c95762_idx'),
        ),
        migrations.AddIndex(
            model_name='medicinestock',
            index=models.Index(fields=['medicine'], name='tbl_medicin_medicin_1db97b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='medicinecategory',
            unique_together={('category', 'parent_category')},
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['code'], name='tbl_locatio_code_cca87b_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['type'], name='tbl_locatio_type_21605d_idx'),
        ),
        migrations.AddIndex(
            model_name='disease',
            index=models.Index(fields=['disease'], name='tbl_animal__disease_294609_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosedsymptomhistory',
            index=models.Index(fields=['diagnosis'], name='idx_symptom_diagnosis'),
        ),
        migrations.AddIndex(
            model_name='diagnosedsymptomhistory',
            index=models.Index(fields=['symptom'], name='idx_symptom_symptom'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['case_entry'], name='idx_receiverlog_case'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['assigned_to'], name='idx_receiverlog_to_user'),
        ),
        migrations.AddIndex(
            model_name='casereceiverlog',
            index=models.Index(fields=['transferred_at'], name='idx_receiverlog_transferred_at'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['case_entry'], name='idx_payment_case_entry'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['payment_method'], name='idx_payment_method'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['payment_status'], name='idx_payment_status'),
        ),
        migrations.AddIndex(
            model_name='casepayment',
            index=models.Index(fields=['transaction_id'], name='idx_payment_txnid'),
        ),
        migrations.AddIndex(
            model_name='caseentry',
            index=models.Index(fields=['case_no'], name='idx_caseentry_case_no'),
        ),
        migrations.AddIndex(
            model_name='caseentry',
            index=models.Index(fields=['cattle'], name='idx_caseentry_cattle'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['case_treatment'], name='idx_treatment_case'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['treatment_by'], name='idx_treatment_by'),
        ),
        migrations.AddIndex(
            model_name='animaltreatment',
            index=models.Index(fields=['medicine'], name='idx_treatment_medicine'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['case_entry'], name='idx_diagnosis_case_entry'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['disease'], name='idx_diagnosis_disease'),
        ),
        migrations.AddIndex(
            model_name='animaldiagnosis',
            index=models.Index(fields=['status'], name='idx_diagnosis_status'),
        ),
    ]
