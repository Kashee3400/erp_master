# Generated by Django 4.2 on 2025-08-18 09:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('veterinary', '0006_remove_paymentmethod_valid_locale_check_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('en', 'English'), ('hi', 'Hindi'), ('ur', 'Urdu')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('registration_number', models.CharField(help_text='Unique registration number of the vehicle (e.g., UP65AB1234).', max_length=20, unique=True, verbose_name='Registration Number')),
                ('model_name', models.CharField(help_text='Manufacturer and model name (e.g., Tata 407, Maruti Swift).', max_length=100, verbose_name='Model Name')),
                ('vehicle_type', models.CharField(choices=[('CAR', 'Car'), ('TRUCK', 'Truck'), ('BUS', 'Bus'), ('2W', 'Two-Wheeler'), ('TRACTOR', 'Tractor'), ('OTHER', 'Other')], default='OTHER', help_text='Type of vehicle.', max_length=20, verbose_name='Vehicle Type')),
                ('chassis_number', models.CharField(help_text='Unique chassis number of the vehicle.', max_length=50, unique=True, verbose_name='Chassis Number')),
                ('engine_number', models.CharField(blank=True, help_text='Unique engine number of the vehicle.', max_length=50, null=True, unique=True, verbose_name='Engine Number')),
                ('purchase_date', models.DateField(blank=True, help_text='Date when the vehicle was purchased.', null=True, verbose_name='Purchase Date')),
                ('registration_date', models.DateField(blank=True, help_text='Date when the vehicle was registered with RTO.', null=True, verbose_name='Registration Date')),
                ('seating_capacity', models.PositiveIntegerField(blank=True, help_text='Number of seats in the vehicle.', null=True, verbose_name='Seating Capacity')),
                ('fuel_type', models.CharField(choices=[('PETROL', 'Petrol'), ('DIESEL', 'Diesel'), ('CNG', 'CNG'), ('ELECTRIC', 'Electric'), ('HYBRID', 'Hybrid')], help_text='Primary fuel type of the vehicle.', max_length=20, verbose_name='Fuel Type')),
                ('insurance_valid_upto', models.DateField(blank=True, help_text='Date until which the vehicle insurance is valid.', null=True, verbose_name='Insurance Valid Upto')),
                ('puc_valid_upto', models.DateField(blank=True, help_text='Date until which the Pollution Under Control certificate is valid.', null=True, verbose_name='PUC Valid Upto')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['registration_number'],
            },
        ),
        migrations.CreateModel(
            name='VehicleKiloMeterLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('en', 'English'), ('hi', 'Hindi'), ('ur', 'Urdu')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('district', models.CharField(help_text='District where the journey took place.', max_length=100, verbose_name='District')),
                ('driver_name', models.CharField(help_text='Full name of the driver.', max_length=150, verbose_name='Driver Name')),
                ('opening_datetime', models.DateTimeField(help_text='Date and time when the journey started.', verbose_name='Opening Date & Time')),
                ('closing_datetime', models.DateTimeField(help_text='Date and time when the journey ended.', verbose_name='Closing Date & Time')),
                ('opening_km', models.PositiveIntegerField(help_text='Odometer reading at the start of the journey.', verbose_name='Opening Kilometer Reading')),
                ('closing_km', models.PositiveIntegerField(help_text='Odometer reading at the end of the journey.', verbose_name='Closing Kilometer Reading')),
                ('place_of_visit', models.TextField(help_text='Locations or places visited during the journey.', verbose_name='Place of Visit')),
                ('purpose_of_journey', models.TextField(help_text='Reason or objective of the journey.', verbose_name='Purpose of Journey')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.ForeignKey(blank=True, help_text='Log associated with user', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('vehicle', models.ForeignKey(help_text='Vehicle for which this journey log is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='kilometer_logs', to='veterinary.vehicle', verbose_name='Vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Kilometer Log',
                'verbose_name_plural': 'Vehicle Kilometer Logs',
                'ordering': ['-opening_datetime'],
            },
        ),
        migrations.AddIndex(
            model_name='vehiclekilometerlog',
            index=models.Index(fields=['vehicle', 'opening_datetime'], name='veterinary__vehicle_733923_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclekilometerlog',
            index=models.Index(fields=['district'], name='veterinary__distric_c29485_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['registration_number'], name='veterinary__registr_e57374_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['vehicle_type'], name='veterinary__vehicle_ea35a0_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['is_active'], name='veterinary__is_acti_dc70cf_idx'),
        ),
    ]
