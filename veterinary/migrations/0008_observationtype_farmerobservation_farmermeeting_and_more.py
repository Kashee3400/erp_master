# Generated by Django 4.2 on 2025-08-19 09:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('veterinary', '0007_vehicle_vehiclekilometerlog_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ObservationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('en', 'English'), ('hi', 'Hindi'), ('ur', 'Urdu')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('name', models.CharField(help_text='Human-readable name of the observation type.', max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Detailed explanation of this observation type.', null=True, verbose_name='Description')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Observation Type',
                'verbose_name_plural': 'Observation Types',
                'db_table': 'observation_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FarmerObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('en', 'English'), ('hi', 'Hindi'), ('ur', 'Urdu')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('mcc_code', models.CharField(help_text='Unique code identifying the Milk Collection Center.', max_length=50, verbose_name='MCC Code')),
                ('mcc_name', models.CharField(help_text='Name of the Milk Collection Center.', max_length=255, verbose_name='MCC Name')),
                ('mcc_ex_code', models.CharField(blank=True, help_text='External reference code for the Milk Collection Center.', max_length=50, null=True, verbose_name='MCC External Code')),
                ('mpp_code', models.CharField(help_text='Unique code identifying the Milk Producer Point.', max_length=50, verbose_name='MPP Code')),
                ('mpp_ex_code', models.CharField(blank=True, help_text='External reference code for the Milk Producer Point.', max_length=50, null=True, verbose_name='MPP External Code')),
                ('mpp_name', models.CharField(help_text='Name of the Milk Producer Point.', max_length=255, verbose_name='MPP Name')),
                ('animal', models.ForeignKey(help_text='The cattle for which the observation is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='veterinary.cattle', verbose_name='Animal')),
                ('member', models.ForeignKey(help_text='Reference to the member associated with this observation.', on_delete=django.db.models.deletion.CASCADE, related_name='farmer_observations', to='veterinary.membersmastercopy', verbose_name='Member')),
                ('observation_type', models.ForeignKey(help_text='Type of observation recorded for this animal.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='veterinary.observationtype', verbose_name='Observation Type')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Farmer Observation',
                'verbose_name_plural': 'Farmer Observations',
                'db_table': 'farmer_observations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FarmerMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the record is active', verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether the record is soft-deleted', verbose_name='Is Deleted')),
                ('sync', models.BooleanField(default=False, help_text='Indicates if the record is synced with the server', verbose_name='Synced')),
                ('locale', models.CharField(choices=[('en', 'English'), ('hi', 'Hindi'), ('ur', 'Urdu')], default='en-us', help_text='Locale used for this entry (e.g. en, hi, te)', max_length=10, verbose_name='Locale')),
                ('mcc_code', models.CharField(help_text='Unique code identifying the Milk Collection Center.', max_length=50, verbose_name='MCC Code')),
                ('mcc_name', models.CharField(help_text='Name of the Milk Collection Center where the meeting is held.', max_length=255, verbose_name='MCC Name')),
                ('mcc_ex_code', models.CharField(blank=True, help_text='External reference code for the Milk Collection Center (for integration purposes).', max_length=50, null=True, verbose_name='MCC External Code')),
                ('mpp_code', models.CharField(help_text='Unique code identifying the Milk Pulling Point.', max_length=50, verbose_name='MPP Code')),
                ('mpp_ex_code', models.CharField(blank=True, help_text='External reference code for the Milk Pulling Point (for integration purposes).', max_length=50, null=True, verbose_name='MPP External Code')),
                ('mpp_name', models.CharField(help_text='Name of the Milk Pulling Point where the meeting is held.', max_length=255, verbose_name='MPP Name')),
                ('total_participants', models.PositiveIntegerField(help_text='Total number of participants who attended the meeting.', verbose_name='Total Participants')),
                ('image', models.ImageField(blank=True, help_text='Image related to the meeting (e.g., group photo, event capture).', null=True, upload_to='farmer_meetings/', verbose_name='Meeting Image')),
                ('member', models.ForeignKey(help_text='Reference to the member who organized or is associated with this meeting.', on_delete=django.db.models.deletion.CASCADE, related_name='farmer_meetings', to='veterinary.membersmastercopy', verbose_name='Member')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Farmer Meeting',
                'verbose_name_plural': 'Farmer Meetings',
                'db_table': 'farmer_meetings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='farmerobservation',
            index=models.Index(fields=['mcc_code'], name='idx_farmerobservation_mcc_code'),
        ),
        migrations.AddIndex(
            model_name='farmerobservation',
            index=models.Index(fields=['mpp_code'], name='idx_farmerobservation_mpp_code'),
        ),
        migrations.AddIndex(
            model_name='farmerobservation',
            index=models.Index(fields=['member'], name='idx_farmerobservation_member'),
        ),
        migrations.AddIndex(
            model_name='farmerobservation',
            index=models.Index(fields=['animal'], name='idx_farmerobservation_animal'),
        ),
        migrations.AddIndex(
            model_name='farmermeeting',
            index=models.Index(fields=['mcc_code'], name='idx_farmermeeting_mcc_code'),
        ),
        migrations.AddIndex(
            model_name='farmermeeting',
            index=models.Index(fields=['mpp_code'], name='idx_farmermeeting_mpp_code'),
        ),
        migrations.AddIndex(
            model_name='farmermeeting',
            index=models.Index(fields=['member'], name='idx_farmermeeting_member'),
        ),
    ]
